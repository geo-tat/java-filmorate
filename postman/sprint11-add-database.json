{
	"info": {
		"_postman_id": "4b830da9-7f6a-4f3e-8420-47f6dad49257",
		"name": "sprint11/add-database Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28341999"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "User create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"mail@mail.ru\"').to.eql('mail@mail.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Nick Name\"').to.eql('Nick Name');\r",
									"});\r",
									"pm.test(\"Test user 'login' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('login');\r",
									"    pm.expect(jsonData.login, '\"login\" field must be \"dolore\"').to.eql('dolore');    \r",
									"});\r",
									"pm.test(\"Test user 'birthday' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('birthday');\r",
									"    pm.expect(jsonData.birthday, '\"birthday\" field must be \"1946-08-20\"').to.eql('1946-08-20');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"login\": \"dolore\",\n  \"name\": \"Nick Name\",\n  \"email\": \"mail@mail.ru\",\n  \"birthday\": \"1946-08-20\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "User create",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"dolore\",\n  \"name\": \"Nick Name\",\n  \"email\": \"mail@mail.ru\",\n  \"birthday\": \"1946-08-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:41:49 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"email\": \"mail@mail.ru\",\n    \"login\": \"dolore\",\n    \"name\": \"Nick Name\",\n    \"birthday\": \"1946-08-20\"\n}"
						}
					]
				},
				{
					"name": "User create Fail login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 or 400\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"login\": \"dolore ullamco\",\n  \"email\": \"yandex@mail.ru\",\n  \"birthday\": \"2446-08-20\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "User create Fail login",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"dolore ullamco\",\n  \"email\": \"yandex@mail.ru\",\n  \"birthday\": \"2446-08-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:42:08 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-07-05T09:42:08.526+00:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"path\": \"/users\"\n}"
						}
					]
				},
				{
					"name": "User create Fail email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 or 400\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"login\": \"dolore ullamco\",\n  \"name\": \"\",\n  \"email\": \"mail.ru\",\n  \"birthday\": \"1980-08-20\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "User create Fail email",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"dolore ullamco\",\n  \"name\": \"\",\n  \"email\": \"mail.ru\",\n  \"birthday\": \"1980-08-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:42:16 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-07-05T09:42:16.407+00:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"path\": \"/users\"\n}"
						}
					]
				},
				{
					"name": "User create Fail birthday",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 or 400\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"login\": \"dolore\",\n  \"name\": \"\",\n  \"email\": \"test@mail.ru\",\n  \"birthday\": \"2446-08-20\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "User create Fail birthday",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"dolore\",\n  \"name\": \"\",\n  \"email\": \"test@mail.ru\",\n  \"birthday\": \"2446-08-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:42:21 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-07-05T09:42:21.394+00:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"path\": \"/users\"\n}"
						}
					]
				},
				{
					"name": "User update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has user update response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"mail@yandex.ru\"').to.eql('mail@yandex.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"est adipisicing\"').to.eql('est adipisicing');\r",
									"});\r",
									"pm.test(\"Test user 'login' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('login');\r",
									"    pm.expect(jsonData.login, '\"login\" field must be \"doloreUpdate\"').to.eql('doloreUpdate');    \r",
									"});\r",
									"pm.test(\"Test user 'birthday' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('birthday');\r",
									"    pm.expect(jsonData.birthday, '\"birthday\" field must be \"1976-09-20\"').to.eql('1976-09-20');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"login\": \"doloreUpdate\",\n  \"name\": \"est adipisicing\",\n  \"id\": 1,\n  \"email\": \"mail@yandex.ru\",\n  \"birthday\": \"1976-09-20\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "User update",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"doloreUpdate\",\n  \"name\": \"est adipisicing\",\n  \"id\": 1,\n  \"email\": \"mail@yandex.ru\",\n  \"birthday\": \"1976-09-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:42:28 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"email\": \"mail@yandex.ru\",\n    \"login\": \"doloreUpdate\",\n    \"name\": \"est adipisicing\",\n    \"birthday\": \"1976-09-20\"\n}"
						}
					]
				},
				{
					"name": "User update unknown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"login\": \"doloreUpdate\",\n  \"name\": \"est adipisicing\",\n  \"id\": 9999,\n  \"email\": \"mail@yandex.ru\",\n  \"birthday\": \"1976-09-20\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "User update unknown",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"doloreUpdate\",\n  \"name\": \"est adipisicing\",\n  \"id\": 9999,\n  \"email\": \"mail@yandex.ru\",\n  \"birthday\": \"1976-09-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:42:32 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Пользователя с таким ID не существует\"\n}"
						}
					]
				},
				{
					"name": "User get All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list user response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test user[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test user[0] 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('email');\r",
									"    pm.expect(jsonData[0].email, '\"email\" must be \"mail@yandex.ru\"').to.eql('mail@yandex.ru');\r",
									"});\r",
									"pm.test(\"Test user[0] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"est adipisicing\"').to.eql('est adipisicing');\r",
									"});\r",
									"pm.test(\"Test user[0] 'login' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('login');\r",
									"    pm.expect(jsonData[0].login, '\"login\" field must be \"doloreUpdate\"').to.eql('doloreUpdate');    \r",
									"});\r",
									"pm.test(\"Test user[0] 'birthday' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('birthday');\r",
									"    pm.expect(jsonData[0].birthday, '\"birthday\" field must be \"1976-09-20\"').to.eql('1976-09-20');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "User get All",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:42:40 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"email\": \"mail@yandex.ru\",\n        \"login\": \"doloreUpdate\",\n        \"name\": \"est adipisicing\",\n        \"birthday\": \"1976-09-20\"\n    }\n]"
						}
					]
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "Friend Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"friend@mail.ru\"').to.eql('friend@mail.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"friend adipisicing\"').to.eql('friend adipisicing');\r",
									"});\r",
									"pm.test(\"Test user 'login' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('login');\r",
									"    pm.expect(jsonData.login, '\"login\" field must be \"friend\"').to.eql('friend');    \r",
									"});\r",
									"pm.test(\"Test user 'birthday' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('birthday');\r",
									"    pm.expect(jsonData.birthday, '\"birthday\" field must be \"1976-08-20\"').to.eql('1976-08-20');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"login\": \"friend\",\n  \"name\": \"friend adipisicing\",\n  \"email\": \"friend@mail.ru\",\n  \"birthday\": \"1976-08-20\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "Friend Create",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"friend\",\n  \"name\": \"friend adipisicing\",\n  \"email\": \"friend@mail.ru\",\n  \"birthday\": \"1976-08-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:42:47 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"email\": \"friend@mail.ru\",\n    \"login\": \"friend\",\n    \"name\": \"friend adipisicing\",\n    \"birthday\": \"1976-08-20\"\n}"
						}
					]
				},
				{
					"name": "Common Friend Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has user create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"friend@common.ru\"').to.eql('friend@common.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"common\"').to.eql('common');\r",
									"});\r",
									"pm.test(\"Test user 'login' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('login');\r",
									"    pm.expect(jsonData.login, '\"login\" field must be \"common\"').to.eql('common');    \r",
									"});\r",
									"pm.test(\"Test user 'birthday' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('birthday');\r",
									"    pm.expect(jsonData.birthday, '\"birthday\" field must be \"2000-08-20\"').to.eql('2000-08-20');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"login\": \"common\",\n  \"name\": \"\",\n  \"email\": \"friend@common.ru\",\n  \"birthday\": \"2000-08-20\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "Common Friend Create",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"common\",\n  \"name\": \"\",\n  \"email\": \"friend@common.ru\",\n  \"birthday\": \"2000-08-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:42:52 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 3,\n    \"email\": \"friend@common.ru\",\n    \"login\": \"common\",\n    \"name\": \"common\",\n    \"birthday\": \"2000-08-20\"\n}"
						}
					]
				},
				{
					"name": "User get by id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has user get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"mail@yandex.ru\"').to.eql('mail@yandex.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"est adipisicing\"').to.eql('est adipisicing');\r",
									"});\r",
									"pm.test(\"Test user 'login' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('login');\r",
									"    pm.expect(jsonData.login, '\"login\" field must be \"doloreUpdate\"').to.eql('doloreUpdate');    \r",
									"});\r",
									"pm.test(\"Test user 'birthday' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('birthday');\r",
									"    pm.expect(jsonData.birthday, '\"birthday\" field must be \"1976-09-20\"').to.eql('1976-09-20');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "User get by id=1",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:42:57 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"email\": \"mail@yandex.ru\",\n    \"login\": \"doloreUpdate\",\n    \"name\": \"est adipisicing\",\n    \"birthday\": \"1976-09-20\"\n}"
						}
					]
				},
				{
					"name": "User get unknown with id=9999",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "9999",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "User get unknown with id=9999",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "9999",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:43:01 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Пользователь не найден\"\n}"
						}
					]
				},
				{
					"name": "Friend get user id=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has user get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"friend@mail.ru\"').to.eql('friend@mail.ru');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"friend adipisicing\"').to.eql('friend adipisicing');\r",
									"});\r",
									"pm.test(\"Test user 'login' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('login');\r",
									"    pm.expect(jsonData.login, '\"login\" field must be \"friend\"').to.eql('friend');    \r",
									"});\r",
									"pm.test(\"Test user 'birthday' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('birthday');\r",
									"    pm.expect(jsonData.birthday, '\"birthday\" field must be \"1976-08-20\"').to.eql('1976-08-20');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Friend get user id=2",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "2",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:43:07 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"email\": \"friend@mail.ru\",\n    \"login\": \"friend\",\n    \"name\": \"friend adipisicing\",\n    \"birthday\": \"1976-08-20\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "friend",
			"item": [
				{
					"name": "User get friends common empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list user response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be empty').to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id/friends/common/:otherId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id",
								"friends",
								"common",
								":otherId"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								},
								{
									"key": "otherId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "User get friends common empty",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id/friends/common/:otherId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id",
										"friends",
										"common",
										":otherId"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										},
										{
											"key": "otherId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:43:13 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "User id=1 add friend id=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id/friends/:friendId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id",
								"friends",
								":friendId"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								},
								{
									"key": "friendId",
									"value": "2",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "User id=1 add friend id=2",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id/friends/:friendId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id",
										"friends",
										":friendId"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										},
										{
											"key": "friendId",
											"value": "2",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:43:18 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "User id=1 add friend unknown id=-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id/friends/:friendId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id",
								"friends",
								":friendId"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								},
								{
									"key": "friendId",
									"value": "-1",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "User id=1 add friend unknown id=-1",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id/friends/:friendId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id",
										"friends",
										":friendId"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										},
										{
											"key": "friendId",
											"value": "-1",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:43:23 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Пользователь не найден\"\n}"
						}
					]
				},
				{
					"name": "User id=1 get friends",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list friend response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test friend[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test friend[0] 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('email');\r",
									"    pm.expect(jsonData[0].email, '\"email\" must be \"friend@mail.ru\"').to.eql('friend@mail.ru');\r",
									"});\r",
									"pm.test(\"Test friend[0] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"friend adipisicing\"').to.eql('friend adipisicing');\r",
									"});\r",
									"pm.test(\"Test friend[0] 'login' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('login');\r",
									"    pm.expect(jsonData[0].login, '\"login\" field must be \"friend\"').to.eql('friend');    \r",
									"});\r",
									"pm.test(\"Test friend[0] 'birthday' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('birthday');\r",
									"    pm.expect(jsonData[0].birthday, '\"birthday\" field must be \"1976-08-20\"').to.eql('1976-08-20');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id/friends",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id",
								"friends"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "User id=1 get friends",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id/friends",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id",
										"friends"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:43:29 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2,\n        \"email\": \"friend@mail.ru\",\n        \"login\": \"friend\",\n        \"name\": \"friend adipisicing\",\n        \"birthday\": \"1976-08-20\"\n    }\n]"
						}
					]
				},
				{
					"name": "User id=2 get friends",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list friend response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id/friends",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id",
								"friends"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "User id=2 get friends",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id/friends",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id",
										"friends"
									],
									"variable": [
										{
											"key": "id",
											"value": "2",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:43:33 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "Empty Common friends to user id=1 with user id=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list common user response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be empty').to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id/friends/common/:otherId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id",
								"friends",
								"common",
								":otherId"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								},
								{
									"key": "otherId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Empty Common friends to user id=1 with user id=2",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id/friends/common/:otherId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id",
										"friends",
										"common",
										":otherId"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										},
										{
											"key": "otherId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:43:39 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "User id=1 add  friend id=3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id/friends/:friendId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id",
								"friends",
								":friendId"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								},
								{
									"key": "friendId",
									"value": "3",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "User id=1 add  friend id=3",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id/friends/:friendId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id",
										"friends",
										":friendId"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										},
										{
											"key": "friendId",
											"value": "3",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:43:45 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "User id=1 get 2 friends",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list friend response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test friend[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test friend[0] 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('email');\r",
									"    pm.expect(jsonData[0].email, '\"email\" must be \"friend@mail.ru\"').to.eql('friend@mail.ru');\r",
									"});\r",
									"pm.test(\"Test friend[0] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"friend adipisicing\"').to.eql('friend adipisicing');\r",
									"});\r",
									"pm.test(\"Test friend[0] 'login' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('login');\r",
									"    pm.expect(jsonData[0].login, '\"login\" field must be \"friend\"').to.eql('friend');    \r",
									"});\r",
									"pm.test(\"Test friend[0] 'birthday' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('birthday');\r",
									"    pm.expect(jsonData[0].birthday, '\"birthday\" field must be \"1976-08-20\"').to.eql('1976-08-20');\r",
									"});\r",
									"\r",
									"pm.test(\"Test friend[1] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test friend[1] 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('email');\r",
									"    pm.expect(jsonData[1].email, '\"email\" must be \"friend@common.ru\"').to.eql('friend@common.ru');\r",
									"});\r",
									"pm.test(\"Test friend[1] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('name');\r",
									"    pm.expect(jsonData[1].name, '\"name\" must be \"common\"').to.eql('common');\r",
									"});\r",
									"pm.test(\"Test friend[1] 'login' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('login');\r",
									"    pm.expect(jsonData[1].login, '\"login\" field must be \"common\"').to.eql('common');    \r",
									"});\r",
									"pm.test(\"Test friend[1] 'birthday' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('birthday');\r",
									"    pm.expect(jsonData[1].birthday, '\"birthday\" field must be \"2000-08-20\"').to.eql('2000-08-20');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id/friends",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id",
								"friends"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "User id=1 get 2 friends",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id/friends",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id",
										"friends"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:43:52 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2,\n        \"email\": \"friend@mail.ru\",\n        \"login\": \"friend\",\n        \"name\": \"friend adipisicing\",\n        \"birthday\": \"1976-08-20\"\n    },\n    {\n        \"id\": 3,\n        \"email\": \"friend@common.ru\",\n        \"login\": \"common\",\n        \"name\": \"common\",\n        \"birthday\": \"2000-08-20\"\n    }\n]"
						}
					]
				},
				{
					"name": "User id=2 add  friend id=3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id/friends/:friendId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id",
								"friends",
								":friendId"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"description": "(Required) "
								},
								{
									"key": "friendId",
									"value": "3",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "User id=2 add  friend id=3",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id/friends/:friendId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id",
										"friends",
										":friendId"
									],
									"variable": [
										{
											"key": "id",
											"value": "2",
											"description": "(Required) "
										},
										{
											"key": "friendId",
											"value": "3",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:43:59 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "User id=2 get 1 friend",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list friend response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test friend[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test friend[0] 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('email');\r",
									"    pm.expect(jsonData[0].email, '\"email\" must be \"friend@common.ru\"').to.eql('friend@common.ru');\r",
									"});\r",
									"pm.test(\"Test friend[0] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"common\"').to.eql('common');\r",
									"});\r",
									"pm.test(\"Test friend[0] 'login' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('login');\r",
									"    pm.expect(jsonData[0].login, '\"login\" field must be \"common\"').to.eql('common');    \r",
									"});\r",
									"pm.test(\"Test friend[0] 'birthday' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('birthday');\r",
									"    pm.expect(jsonData[0].birthday, '\"birthday\" field must be \"2000-08-20\"').to.eql('2000-08-20');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id/friends",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id",
								"friends"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "User id=2 get 1 friend",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id/friends",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id",
										"friends"
									],
									"variable": [
										{
											"key": "id",
											"value": "2",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:44:05 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 3,\n        \"email\": \"friend@common.ru\",\n        \"login\": \"common\",\n        \"name\": \"common\",\n        \"birthday\": \"2000-08-20\"\n    }\n]"
						}
					]
				},
				{
					"name": "Common friend to user id=1 with user id=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list common friend response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test friend[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test friend[0] 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('email');\r",
									"    pm.expect(jsonData[0].email, '\"email\" must be \"friend@common.ru\"').to.eql('friend@common.ru');\r",
									"});\r",
									"pm.test(\"Test friend[0] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"common\"').to.eql('common');\r",
									"});\r",
									"pm.test(\"Test friend[0] 'login' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('login');\r",
									"    pm.expect(jsonData[0].login, '\"login\" field must be \"common\"').to.eql('common');    \r",
									"});\r",
									"pm.test(\"Test friend[0] 'birthday' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('birthday');\r",
									"    pm.expect(jsonData[0].birthday, '\"birthday\" field must be \"2000-08-20\"').to.eql('2000-08-20');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id/friends/common/:otherId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id",
								"friends",
								"common",
								":otherId"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								},
								{
									"key": "otherId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Common friend to user id=1 with user id=2",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id/friends/common/:otherId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id",
										"friends",
										"common",
										":otherId"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										},
										{
											"key": "otherId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:44:11 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 3,\n        \"email\": \"friend@common.ru\",\n        \"login\": \"common\",\n        \"name\": \"common\",\n        \"birthday\": \"2000-08-20\"\n    }\n]"
						}
					]
				},
				{
					"name": "User id=1 remove friend id=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id/friends/:friendId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id",
								"friends",
								":friendId"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								},
								{
									"key": "friendId",
									"value": "2",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "User id=1 remove friend id=2",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id/friends/:friendId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id",
										"friends",
										":friendId"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										},
										{
											"key": "friendId",
											"value": "2",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:44:18 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "User id=1 get common with user id=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list common friend response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test friend[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test friend[0] 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('email');\r",
									"    pm.expect(jsonData[0].email, '\"email\" must be \"friend@common.ru\"').to.eql('friend@common.ru');\r",
									"});\r",
									"pm.test(\"Test friend[0] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"common\"').to.eql('common');\r",
									"});\r",
									"pm.test(\"Test friend[0] 'login' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('login');\r",
									"    pm.expect(jsonData[0].login, '\"login\" field must be \"common\"').to.eql('common');    \r",
									"});\r",
									"pm.test(\"Test friend[0] 'birthday' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('birthday');\r",
									"    pm.expect(jsonData[0].birthday, '\"birthday\" field must be \"2000-08-20\"').to.eql('2000-08-20');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id/friends/common/:otherId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id",
								"friends",
								"common",
								":otherId"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								},
								{
									"key": "otherId",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "User id=1 get common with user id=2",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id/friends/common/:otherId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id",
										"friends",
										"common",
										":otherId"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										},
										{
											"key": "otherId",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:44:23 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 3,\n        \"email\": \"friend@common.ru\",\n        \"login\": \"common\",\n        \"name\": \"common\",\n        \"birthday\": \"2000-08-20\"\n    }\n]"
						}
					]
				},
				{
					"name": "User id=2 get common with user id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list common friend response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test friend[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test friend[0] 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('email');\r",
									"    pm.expect(jsonData[0].email, '\"email\" must be \"friend@common.ru\"').to.eql('friend@common.ru');\r",
									"});\r",
									"pm.test(\"Test friend[0] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"common\"').to.eql('common');\r",
									"});\r",
									"pm.test(\"Test friend[0] 'login' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('login');\r",
									"    pm.expect(jsonData[0].login, '\"login\" field must be \"common\"').to.eql('common');    \r",
									"});\r",
									"pm.test(\"Test friend[0] 'birthday' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('birthday');\r",
									"    pm.expect(jsonData[0].birthday, '\"birthday\" field must be \"2000-08-20\"').to.eql('2000-08-20');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id/friends/common/:otherId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id",
								"friends",
								"common",
								":otherId"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"description": "(Required) "
								},
								{
									"key": "otherId",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "User id=2 get common with user id=1",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id/friends/common/:otherId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id",
										"friends",
										"common",
										":otherId"
									],
									"variable": [
										{
											"key": "id",
											"value": "2",
											"description": "(Required) "
										},
										{
											"key": "otherId",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:44:29 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 3,\n        \"email\": \"friend@common.ru\",\n        \"login\": \"common\",\n        \"name\": \"common\",\n        \"birthday\": \"2000-08-20\"\n    }\n]"
						}
					]
				},
				{
					"name": "User id=1 get 1 friend",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list friend response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test friend[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test friend[0] 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('email');\r",
									"    pm.expect(jsonData[0].email, '\"email\" must be \"friend@common.ru\"').to.eql('friend@common.ru');\r",
									"});\r",
									"pm.test(\"Test friend[0] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"common\"').to.eql('common');\r",
									"});\r",
									"pm.test(\"Test friend[0] 'login' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('login');\r",
									"    pm.expect(jsonData[0].login, '\"login\" field must be \"common\"').to.eql('common');    \r",
									"});\r",
									"pm.test(\"Test friend[0] 'birthday' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('birthday');\r",
									"    pm.expect(jsonData[0].birthday, '\"birthday\" field must be \"2000-08-20\"').to.eql('2000-08-20');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id/friends",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id",
								"friends"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "User id=1 get 1 friend",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id/friends",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id",
										"friends"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:44:35 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 3,\n        \"email\": \"friend@common.ru\",\n        \"login\": \"common\",\n        \"name\": \"common\",\n        \"birthday\": \"2000-08-20\"\n    }\n]"
						}
					]
				}
			]
		},
		{
			"name": "films",
			"item": [
				{
					"name": "Film get All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list film response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/films",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films"
							]
						}
					},
					"response": [
						{
							"name": "Film get All",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/films",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:44:46 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				},
				{
					"name": "Film id=1 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has film create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test film 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test film 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"nisi eiusmod\"').to.eql('nisi eiusmod');\r",
									"});\r",
									"pm.test(\"Test film 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description, '\"description\" must be \"adipisicing\"').to.eql('adipisicing');\r",
									"});\r",
									"pm.test(\"Test film 'releaseDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('releaseDate');\r",
									"    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1967-03-25\"').to.eql('1967-03-25');\r",
									"});\r",
									"pm.test(\"Test film 'duration' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('duration');\r",
									"    pm.expect(jsonData.duration, '\"duration\" field must be 100').to.eql(100);    \r",
									"});\r",
									"pm.test(\"Test film 'mpa.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('mpa');\r",
									"    pm.expect(jsonData.mpa).to.have.property('id');\r",
									"    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 1').to.eql(1);    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"nisi eiusmod\",\n  \"description\": \"adipisicing\",\n  \"releaseDate\": \"1967-03-25\",\n  \"duration\": 100,\n  \"mpa\": { \"id\": 1}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/films",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films"
							]
						}
					},
					"response": [
						{
							"name": "Film id=1 create",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"nisi eiusmod\",\n  \"description\": \"adipisicing\",\n  \"releaseDate\": \"1967-03-25\",\n  \"duration\": 100,\n  \"mpa\": { \"id\": 1}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/films",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:44:52 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"nisi eiusmod\",\n    \"description\": \"adipisicing\",\n    \"releaseDate\": \"1967-03-25\",\n    \"duration\": 100,\n    \"genres\": [],\n    \"mpa\": {\n        \"id\": 1,\n        \"name\": null\n    },\n    \"directors\": []\n}"
						}
					]
				},
				{
					"name": "Film create Fail name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 or 400\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\",\n  \"description\": \"Description\",\n  \"releaseDate\": \"1900-03-25\",\n  \"duration\": 200,\n  \"mpa\": { \"id\": 1}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/films",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films"
							]
						}
					},
					"response": [
						{
							"name": "Film create Fail name",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"\",\n  \"description\": \"Description\",\n  \"releaseDate\": \"1900-03-25\",\n  \"duration\": 200,\n  \"mpa\": { \"id\": 1}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/films",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:44:58 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-07-05T09:44:58.489+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/films\"\n}"
						}
					]
				},
				{
					"name": "Film create Fail description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 or 400\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Film name\",\n  \"description\": \"Пятеро друзей ( комик-группа «Шарло»), приезжают в город Бризуль. Здесь они хотят разыскать господина Огюста Куглова, который задолжал им деньги, а именно 20 миллионов. о Куглов, который за время «своего отсутствия», стал кандидатом Коломбани.\",\n    \"releaseDate\": \"1900-03-25\",\n  \"duration\": 200,\n  \"mpa\": { \"id\": 1}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/films",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films"
							]
						}
					},
					"response": [
						{
							"name": "Film create Fail description",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Film name\",\n  \"description\": \"Пятеро друзей ( комик-группа «Шарло»), приезжают в город Бризуль. Здесь они хотят разыскать господина Огюста Куглова, который задолжал им деньги, а именно 20 миллионов. о Куглов, который за время «своего отсутствия», стал кандидатом Коломбани.\",\n    \"releaseDate\": \"1900-03-25\",\n  \"duration\": 200,\n  \"mpa\": { \"id\": 1}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/films",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:45:05 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-07-05T09:45:05.416+00:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"path\": \"/films\"\n}"
						}
					]
				},
				{
					"name": "Film create Fail releaseDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 or 400\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Name\",\n  \"description\": \"Description\",\n  \"releaseDate\": \"1890-03-25\",\n  \"duration\": 200,\n  \"mpa\": { \"id\": 1}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/films",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films"
							]
						}
					},
					"response": [
						{
							"name": "Film create Fail releaseDate",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Name\",\n  \"description\": \"Description\",\n  \"releaseDate\": \"1890-03-25\",\n  \"duration\": 200,\n  \"mpa\": { \"id\": 1}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/films",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:45:11 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-07-05T09:45:11.654+00:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"path\": \"/films\"\n}"
						}
					]
				},
				{
					"name": "Film create Fail duration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 or 400\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Name\",\n  \"description\": \"Descrition\",\n  \"releaseDate\": \"1980-03-25\",\n  \"duration\": -200,\n  \"mpa\": { \"id\": 1}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/films",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films"
							]
						}
					},
					"response": [
						{
							"name": "Film create Fail duration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Name\",\n  \"description\": \"Descrition\",\n  \"releaseDate\": \"1980-03-25\",\n  \"duration\": -200,\n  \"mpa\": { \"id\": 1}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/films",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:45:17 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-07-05T09:45:17.923+00:00\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"path\": \"/films\"\n}"
						}
					]
				},
				{
					"name": "Film update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has film update response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test film 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
									"});\r",
									"pm.test(\"Test film 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
									"});\r",
									"pm.test(\"Test film 'releaseDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('releaseDate');\r",
									"    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
									"});\r",
									"pm.test(\"Test film 'duration' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('duration');\r",
									"    pm.expect(jsonData.duration, '\"duration\" field must be 190').to.eql(190);    \r",
									"});\r",
									"pm.test(\"Test film 'mpa.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('mpa');\r",
									"    pm.expect(jsonData.mpa).to.have.property('id');\r",
									"    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 2').to.eql(2);    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 1,\n  \"name\": \"Film Updated\",\n  \"releaseDate\": \"1989-04-17\",\n  \"description\": \"New film update decription\",\n  \"duration\": 190,\n  \"rate\": 4,\n  \"mpa\": { \"id\": 2}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/films",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films"
							]
						}
					},
					"response": [
						{
							"name": "Film update",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 1,\n  \"name\": \"Film Updated\",\n  \"releaseDate\": \"1989-04-17\",\n  \"description\": \"New film update decription\",\n  \"duration\": 190,\n  \"rate\": 4,\n  \"mpa\": { \"id\": 2}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/films",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:45:24 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Film Updated\",\n    \"description\": \"New film update decription\",\n    \"releaseDate\": \"1989-04-17\",\n    \"duration\": 190,\n    \"genres\": [],\n    \"mpa\": {\n        \"id\": 2,\n        \"name\": null\n    },\n    \"directors\": []\n}"
						}
					]
				},
				{
					"name": "Film update unknown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 9999,\n  \"name\": \"Film Updated\",\n  \"releaseDate\": \"1989-04-17\",\n  \"description\": \"New film update decription\",\n  \"duration\": 190,\n  \"rate\": 4,\n  \"mpa\": { \"id\": 1}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/films",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films"
							]
						}
					},
					"response": [
						{
							"name": "Film update unknown",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 9999,\n  \"name\": \"Film Updated\",\n  \"releaseDate\": \"1989-04-17\",\n  \"description\": \"New film update decription\",\n  \"duration\": 190,\n  \"rate\": 4,\n  \"mpa\": { \"id\": 1}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/films",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:45:30 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Фильма с таким ID не существует\"\n}"
						}
					]
				},
				{
					"name": "Film get All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list film response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test film[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test film[0] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
									"});\r",
									"pm.test(\"Test film[0] 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('description');\r",
									"    pm.expect(jsonData[0].description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
									"});\r",
									"pm.test(\"Test film[0] 'releaseDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('releaseDate');\r",
									"    pm.expect(jsonData[0].releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
									"});\r",
									"pm.test(\"Test film[0] 'duration' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('duration');\r",
									"    pm.expect(jsonData[0].duration, '\"duration\" field must be 190').to.eql(190);    \r",
									"});\r",
									"pm.test(\"Test film[0] 'mpa' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('mpa');\r",
									"    pm.expect(jsonData[0].mpa).to.have.property('id');\r",
									"    pm.expect(jsonData[0].mpa.id, '\"mpa.id\" field must be 2').to.eql(2);    \r",
									"    pm.expect(jsonData[0].mpa).to.have.property('name');\r",
									"    pm.expect(jsonData[0].mpa.name, '\"mpa.name\" field must be \"PG\"').to.eql(\"PG\");    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film[0] 'genres' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('genres');\r",
									"    pm.expect(jsonData[0].genres.length, '\"genres\" field must be have 0 genres').to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/films",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films"
							]
						}
					},
					"response": [
						{
							"name": "Film get All",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/films",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:45:37 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Film Updated\",\n        \"description\": \"New film update decription\",\n        \"releaseDate\": \"1989-04-17\",\n        \"duration\": 190,\n        \"genres\": [],\n        \"mpa\": {\n            \"id\": 2,\n            \"name\": \"PG\"\n        },\n        \"directors\": []\n    }\n]"
						}
					]
				},
				{
					"name": "Film get Popular",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list popular film response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test film[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test film[0] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
									"});\r",
									"pm.test(\"Test film[0] 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('description');\r",
									"    pm.expect(jsonData[0].description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
									"});\r",
									"pm.test(\"Test film[0] 'releaseDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('releaseDate');\r",
									"    pm.expect(jsonData[0].releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
									"});\r",
									"pm.test(\"Test film[0] 'duration' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('duration');\r",
									"    pm.expect(jsonData[0].duration, '\"duration\" field must be 190').to.eql(190);    \r",
									"});\r",
									"pm.test(\"Test film[0] 'mpa' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('mpa');\r",
									"    pm.expect(jsonData[0].mpa).to.have.property('id');\r",
									"    pm.expect(jsonData[0].mpa.id, '\"mpa.id\" field must be 2').to.eql(2);    \r",
									"    pm.expect(jsonData[0].mpa).to.have.property('name');\r",
									"    pm.expect(jsonData[0].mpa.name, '\"mpa.name\" field must be \"PG\"').to.eql(\"PG\");    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film[0] 'genres' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('genres');\r",
									"    pm.expect(jsonData[0].genres.length, '\"genres\" field must be have 0 genres').to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/films/popular",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films",
								"popular"
							]
						}
					},
					"response": [
						{
							"name": "Film get Popular",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/films/popular",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films",
										"popular"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:45:44 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Film Updated\",\n        \"description\": \"New film update decription\",\n        \"releaseDate\": \"1989-04-17\",\n        \"duration\": 190,\n        \"genres\": [],\n        \"mpa\": {\n            \"id\": 2,\n            \"name\": \"PG\"\n        },\n        \"directors\": []\n    }\n]"
						}
					]
				}
			]
		},
		{
			"name": "film",
			"item": [
				{
					"name": "Film id=2 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has film create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test film 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test film 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"New film\"').to.eql('New film');\r",
									"});\r",
									"pm.test(\"Test film 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description, '\"description\" must be \"New film about friends\"').to.eql('New film about friends');\r",
									"});\r",
									"pm.test(\"Test film 'releaseDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('releaseDate');\r",
									"    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
									"});\r",
									"pm.test(\"Test film 'duration' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('duration');\r",
									"    pm.expect(jsonData.duration, '\"duration\" field must be 100').to.eql(120);    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'mpa.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('mpa');\r",
									"    pm.expect(jsonData.mpa).to.have.property('id');\r",
									"    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 3').to.eql(3);    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'genres' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('genres');\r",
									"    pm.expect(jsonData.genres.length, '\"genres\" field must be have 1 genre').to.eql(1);\r",
									"    pm.expect(jsonData.genres[0]).to.have.property('id');\r",
									"    pm.expect(jsonData.genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);    \r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"New film\",\n  \"releaseDate\": \"1999-04-30\",\n  \"description\": \"New film about friends\",\n  \"duration\": 120,\n  \"rate\": 4,\n  \"mpa\": { \"id\": 3},\n  \"genres\": [{ \"id\": 1}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/films",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films"
							]
						}
					},
					"response": [
						{
							"name": "Film id=2 create",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"New film\",\n  \"releaseDate\": \"1999-04-30\",\n  \"description\": \"New film about friends\",\n  \"duration\": 120,\n  \"rate\": 4,\n  \"mpa\": { \"id\": 3},\n  \"genres\": [{ \"id\": 1}]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/films",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:45:52 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"New film\",\n    \"description\": \"New film about friends\",\n    \"releaseDate\": \"1999-04-30\",\n    \"duration\": 120,\n    \"genres\": [\n        {\n            \"id\": 1,\n            \"name\": \"Комедия\"\n        }\n    ],\n    \"mpa\": {\n        \"id\": 3,\n        \"name\": null\n    },\n    \"directors\": []\n}"
						}
					]
				},
				{
					"name": "Film id=1 get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Get film response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test film 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test film 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
									"});\r",
									"pm.test(\"Test film 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
									"});\r",
									"pm.test(\"Test film 'releaseDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('releaseDate');\r",
									"    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
									"});\r",
									"pm.test(\"Test film 'duration' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('duration');\r",
									"    pm.expect(jsonData.duration, '\"duration\" field must be 190').to.eql(190);    \r",
									"});\r",
									"pm.test(\"Test film 'mpa' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('mpa');\r",
									"    pm.expect(jsonData.mpa).to.have.property('id');\r",
									"    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 2').to.eql(2);    \r",
									"    pm.expect(jsonData.mpa).to.have.property('name');\r",
									"    pm.expect(jsonData.mpa.name, '\"mpa.name\" field must be \"PG\"').to.eql(\"PG\");    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'genres' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('genres');\r",
									"    pm.expect(jsonData.genres.length, '\"genres\" field must be have 0 genres').to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/films/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Film id=1 get",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/films/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:46:00 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Film Updated\",\n    \"description\": \"New film update decription\",\n    \"releaseDate\": \"1989-04-17\",\n    \"duration\": 190,\n    \"genres\": [],\n    \"mpa\": {\n        \"id\": 2,\n        \"name\": \"PG\"\n    },\n    \"directors\": []\n}"
						}
					]
				},
				{
					"name": "Film id=9999 get not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/films/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "9999",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Film id=9999 get not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/films/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "9999",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:46:07 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Фильм c Id: 9999 не найден.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "like",
			"item": [
				{
					"name": "Film id=2 add Like from user id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/films/:id/like/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films",
								":id",
								"like",
								":userId"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"description": "(Required) "
								},
								{
									"key": "userId",
									"value": "1",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Film id=2 add Like from user id=1",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/films/:id/like/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films",
										":id",
										"like",
										":userId"
									],
									"variable": [
										{
											"key": "id",
											"value": "2",
											"description": "(Required) "
										},
										{
											"key": "userId",
											"value": "1",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:46:16 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Film most popular film",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list popular film response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test film[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test film[0] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"New film\"').to.eql('New film');\r",
									"});\r",
									"pm.test(\"Test film[0] 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('description');\r",
									"    pm.expect(jsonData[0].description, '\"description\" must be \"New film about friends\"').to.eql('New film about friends');\r",
									"});\r",
									"pm.test(\"Test film[0] 'releaseDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('releaseDate');\r",
									"    pm.expect(jsonData[0].releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
									"});\r",
									"pm.test(\"Test film[0] 'duration' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('duration');\r",
									"    pm.expect(jsonData[0].duration, '\"duration\" field must be 100').to.eql(120);    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/films/popular?count=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films",
								"popular"
							],
							"query": [
								{
									"key": "count",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "Film most popular film",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/films/popular?count=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films",
										"popular"
									],
									"query": [
										{
											"key": "count",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:46:24 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2,\n        \"name\": \"New film\",\n        \"description\": \"New film about friends\",\n        \"releaseDate\": \"1999-04-30\",\n        \"duration\": 120,\n        \"genres\": [\n            {\n                \"id\": 1,\n                \"name\": \"Комедия\"\n            }\n        ],\n        \"mpa\": {\n            \"id\": 3,\n            \"name\": \"PG-13\"\n        },\n        \"directors\": []\n    }\n]"
						}
					]
				},
				{
					"name": "Film id=2 add Like from user id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/films/:id/like/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films",
								":id",
								"like",
								":userId"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"description": "(Required) "
								},
								{
									"key": "userId",
									"value": "1",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Film id=2 add Like from user id=1",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/films/:id/like/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films",
										":id",
										"like",
										":userId"
									],
									"variable": [
										{
											"key": "id",
											"value": "2",
											"description": "(Required) "
										},
										{
											"key": "userId",
											"value": "1",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:46:35 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Film get all popular film",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list popular film response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/films/popular",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films",
								"popular"
							]
						}
					},
					"response": [
						{
							"name": "Film get all popular film",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/films/popular",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films",
										"popular"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:46:42 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Film Updated\",\n        \"description\": \"New film update decription\",\n        \"releaseDate\": \"1989-04-17\",\n        \"duration\": 190,\n        \"genres\": [],\n        \"mpa\": {\n            \"id\": 2,\n            \"name\": \"PG\"\n        },\n        \"directors\": []\n    },\n    {\n        \"id\": 2,\n        \"name\": \"New film\",\n        \"description\": \"New film about friends\",\n        \"releaseDate\": \"1999-04-30\",\n        \"duration\": 120,\n        \"genres\": [\n            {\n                \"id\": 1,\n                \"name\": \"Комедия\"\n            }\n        ],\n        \"mpa\": {\n            \"id\": 3,\n            \"name\": \"PG-13\"\n        },\n        \"directors\": []\n    }\n]"
						}
					]
				},
				{
					"name": "Film id=2 remove Like from user id=-2  not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/films/:id/like/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films",
								":id",
								"like",
								":userId"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								},
								{
									"key": "userId",
									"value": "-2",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Film id=2 remove Like from user id=-2  not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/films/:id/like/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films",
										":id",
										"like",
										":userId"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										},
										{
											"key": "userId",
											"value": "-2",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:46:49 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Пользователь не найден\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "MPA",
			"item": [
				{
					"name": "Mpa id=1 get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Get MPA response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test MPA 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test MPA 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"G\"').to.eql('G');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/mpa/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mpa",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Mpa id=1 get",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/mpa/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"mpa",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:48:37 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"G\"\n}"
						}
					]
				},
				{
					"name": "Mpa  id=9999 get not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/mpa/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mpa",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "9999",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Mpa  id=9999 get not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/mpa/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"mpa",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "9999",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:48:46 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Id не существует.\"\n}"
						}
					]
				},
				{
					"name": "Mpa  get All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list MPA response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 5').to.eql(5);\r",
									"});\r",
									"pm.test(\"Test MPA[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test MPA[0] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"G\"').to.eql('G');\r",
									"});\r",
									"pm.test(\"Test MPA[1] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test MPA[1] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('name');\r",
									"    pm.expect(jsonData[1].name, '\"name\" must be \"PG\"').to.eql('PG');\r",
									"});\r",
									"pm.test(\"Test MPA[2] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('id');\r",
									"    pm.expect(jsonData[2].id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test MPA[2] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('name');\r",
									"    pm.expect(jsonData[2].name, '\"name\" must be \"PG-13\"').to.eql('PG-13');\r",
									"});\r",
									"pm.test(\"Test MPA[3] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[3]).to.have.property('id');\r",
									"    pm.expect(jsonData[3].id, '\"id\" must be 4').to.eql(4);\r",
									"});\r",
									"pm.test(\"Test MPA[3] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[3]).to.have.property('name');\r",
									"    pm.expect(jsonData[3].name, '\"name\" must be \"R\"').to.eql('R');\r",
									"});\r",
									"pm.test(\"Test MPA[4] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[4]).to.have.property('id');\r",
									"    pm.expect(jsonData[4].id, '\"id\" must be 5').to.eql(5);\r",
									"});\r",
									"pm.test(\"Test MPA[4] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[4]).to.have.property('name');\r",
									"    pm.expect(jsonData[4].name, '\"name\" must be \"NC-17\"').to.eql('NC-17');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/mpa",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mpa"
							]
						}
					},
					"response": [
						{
							"name": "Mpa  get All",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/mpa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"mpa"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:48:55 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"G\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"PG\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"PG-13\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"R\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"NC-17\"\n    }\n]"
						}
					]
				}
			]
		},
		{
			"name": "Genre",
			"item": [
				{
					"name": "Genre id=1 get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Get genre response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test genre 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test genre 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Комедия\"').to.eql('Комедия');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/genres/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Genre id=1 get",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/genres/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"genres",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:49:05 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Комедия\"\n}"
						}
					]
				},
				{
					"name": "Genre get unknown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/genres/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "9999",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Genre get unknown",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/genres/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"genres",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "9999",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:49:15 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"ID не существует.\"\n}"
						}
					]
				},
				{
					"name": "Genre All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list genre response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 6').to.eql(6);\r",
									"});\r",
									"pm.test(\"Test genre[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test genre[0] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"Комедия\"').to.eql('Комедия');\r",
									"});\r",
									"pm.test(\"Test genre[1] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test genre[1] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('name');\r",
									"    pm.expect(jsonData[1].name, '\"name\" must be \"Драма\"').to.eql('Драма');\r",
									"});\r",
									"pm.test(\"Test genre[2] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('id');\r",
									"    pm.expect(jsonData[2].id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test genre[2] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('name');\r",
									"    pm.expect(jsonData[2].name, '\"name\" must be \"Мультфильм\"').to.eql('Мультфильм');\r",
									"});\r",
									"pm.test(\"Test genre[3] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[3]).to.have.property('id');\r",
									"    pm.expect(jsonData[3].id, '\"id\" must be 4').to.eql(4);\r",
									"});\r",
									"pm.test(\"Test genre[3] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[3]).to.have.property('name');\r",
									"    pm.expect(jsonData[3].name, '\"name\" must be \"Триллер\"').to.eql('Триллер');\r",
									"});\r",
									"pm.test(\"Test genre[4] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[4]).to.have.property('id');\r",
									"    pm.expect(jsonData[4].id, '\"id\" must be 5').to.eql(5);\r",
									"});\r",
									"pm.test(\"Test genre[4] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[4]).to.have.property('name');\r",
									"    pm.expect(jsonData[4].name, '\"name\" must be \"Документальный\"').to.eql('Документальный');\r",
									"});\r",
									"pm.test(\"Test genre[5] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[5]).to.have.property('id');\r",
									"    pm.expect(jsonData[5].id, '\"id\" must be 6').to.eql(6);\r",
									"});\r",
									"pm.test(\"Test genre[5] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[5]).to.have.property('name');\r",
									"    pm.expect(jsonData[5].name, '\"name\" must be \"Боевик\"').to.eql('Боевик');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/genres",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres"
							]
						}
					},
					"response": [
						{
							"name": "Genre All",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/genres",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"genres"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:49:25 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Комедия\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Драма\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Мультфильм\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Триллер\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Документальный\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Боевик\"\n    }\n]"
						}
					]
				},
				{
					"name": "Film id=1 update genre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has film update response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test film 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
									"});\r",
									"pm.test(\"Test film 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'releaseDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('releaseDate');\r",
									"    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
									"});\r",
									"pm.test(\"Test film 'duration' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('duration');\r",
									"    pm.expect(jsonData.duration, '\"duration\" field must be 190').to.eql(190);    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'mpa.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('mpa');\r",
									"    pm.expect(jsonData.mpa).to.have.property('id');\r",
									"    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'genres' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('genres');\r",
									"    pm.expect(jsonData.genres.length, '\"genres\" field must be have 1 genre').to.eql(1);\r",
									"    pm.expect(jsonData.genres[0]).to.have.property('id');\r",
									"    pm.expect(jsonData.genres[0].id, '\"genres[0].id\" field must be 2').to.eql(2);    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 1,\n  \"name\": \"Film Updated\",\n  \"releaseDate\": \"1989-04-17\",\n  \"description\": \"New film update decription\",\n  \"duration\": 190,\n  \"rate\": 4,\n  \"mpa\": { \"id\": 5},\n  \"genres\": [{ \"id\": 2}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/films",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films"
							]
						}
					},
					"response": [
						{
							"name": "Film id=1 update genre",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 1,\n  \"name\": \"Film Updated\",\n  \"releaseDate\": \"1989-04-17\",\n  \"description\": \"New film update decription\",\n  \"duration\": 190,\n  \"rate\": 4,\n  \"mpa\": { \"id\": 5},\n  \"genres\": [{ \"id\": 2}]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/films",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:49:36 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Film Updated\",\n    \"description\": \"New film update decription\",\n    \"releaseDate\": \"1989-04-17\",\n    \"duration\": 190,\n    \"genres\": [\n        {\n            \"id\": 2,\n            \"name\": \"Драма\"\n        }\n    ],\n    \"mpa\": {\n        \"id\": 5,\n        \"name\": null\n    },\n    \"directors\": []\n}"
						}
					]
				},
				{
					"name": "Film id=1 get with genre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Get film response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test film 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test film 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
									"});\r",
									"pm.test(\"Test film 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
									"});\r",
									"pm.test(\"Test film 'releaseDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('releaseDate');\r",
									"    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
									"});\r",
									"pm.test(\"Test film 'duration' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('duration');\r",
									"    pm.expect(jsonData.duration, '\"duration\" field must be 190').to.eql(190);    \r",
									"});\r",
									"pm.test(\"Test film 'mpa' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('mpa');\r",
									"    pm.expect(jsonData.mpa).to.have.property('id');\r",
									"    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
									"    pm.expect(jsonData.mpa).to.have.property('name');\r",
									"    pm.expect(jsonData.mpa.name, '\"mpa.name\" field must be \"PG\"').to.eql(\"NC-17\");    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'genres' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('genres');\r",
									"    pm.expect(jsonData.genres.length, '\"genres\" field must be have 1 genre').to.eql(1);\r",
									"    pm.expect(jsonData.genres[0]).to.have.property('id');\r",
									"    pm.expect(jsonData.genres[0].id, '\"genres[0].id\" field must be 2').to.eql(2);    \r",
									"    pm.expect(jsonData.genres[0]).to.have.property('name');\r",
									"    pm.expect(jsonData.genres[0].name, '\"genres[0].name\" field must be \"Драма\"').to.eql('Драма');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/films/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Film id=1 get with genre",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/films/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:49:46 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Film Updated\",\n    \"description\": \"New film update decription\",\n    \"releaseDate\": \"1989-04-17\",\n    \"duration\": 190,\n    \"genres\": [\n        {\n            \"id\": 2,\n            \"name\": \"Драма\"\n        }\n    ],\n    \"mpa\": {\n        \"id\": 5,\n        \"name\": \"NC-17\"\n    },\n    \"directors\": []\n}"
						}
					]
				},
				{
					"name": "Film All with genre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list film response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test film[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test film[0] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
									"});\r",
									"pm.test(\"Test film[0] 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('description');\r",
									"    pm.expect(jsonData[0].description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
									"});\r",
									"pm.test(\"Test film[0] 'releaseDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('releaseDate');\r",
									"    pm.expect(jsonData[0].releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
									"});\r",
									"pm.test(\"Test film[0] 'duration' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('duration');\r",
									"    pm.expect(jsonData[0].duration, '\"duration\" field must be 190').to.eql(190);    \r",
									"});\r",
									"pm.test(\"Test film[0] 'mpa' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('mpa');\r",
									"    pm.expect(jsonData[0].mpa).to.have.property('id');\r",
									"    pm.expect(jsonData[0].mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
									"    pm.expect(jsonData[0].mpa).to.have.property('name');\r",
									"    pm.expect(jsonData[0].mpa.name, '\"mpa.name\" field must be \"NC-17\"').to.eql(\"NC-17\");    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film[0] 'genres' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('genres');\r",
									"    pm.expect(jsonData[0].genres.length, '\"genres\" field must be have 1 genre').to.eql(1);\r",
									"    pm.expect(jsonData[0].genres[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].genres[0].id, '\"genres[0].id\" field must be 2').to.eql(2);    \r",
									"    pm.expect(jsonData[0].genres[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0].genres[0].name, '\"genres[0].name\" field must be \"Драма\"').to.eql('Драма');\r",
									"});\r",
									"\r",
									"pm.test(\"Test film[1] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test film[1] 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('name');\r",
									"    pm.expect(jsonData[1].name, '\"name\" must be \"New film\"').to.eql('New film');\r",
									"});\r",
									"pm.test(\"Test film[1] 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('description');\r",
									"    pm.expect(jsonData[1].description, '\"description\" must be \"New film about friends\"').to.eql('New film about friends');\r",
									"});\r",
									"pm.test(\"Test film[1] 'releaseDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('releaseDate');\r",
									"    pm.expect(jsonData[1].releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
									"});\r",
									"pm.test(\"Test film[1] 'duration' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('duration');\r",
									"    pm.expect(jsonData[1].duration, '\"duration\" field must be 100').to.eql(120);    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'mpa.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('mpa');\r",
									"    pm.expect(jsonData[1].mpa).to.have.property('id');\r",
									"    pm.expect(jsonData[1].mpa.id, '\"mpa.id\" field must be 3').to.eql(3);    \r",
									"    pm.expect(jsonData[1].mpa).to.have.property('name');\r",
									"    pm.expect(jsonData[1].mpa.name, '\"mpa.name\" field must be \"PG-13\"').to.eql(\"PG-13\");    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film[1] 'genres' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('genres');\r",
									"    pm.expect(jsonData[1].genres.length, '\"genres\" field must be have 1 genre').to.eql(1);\r",
									"    pm.expect(jsonData[1].genres[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);    \r",
									"    pm.expect(jsonData[1].genres[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[1].genres[0].name, '\"genres[0].name\" field must be \"Комедия\"').to.eql('Комедия');});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/films",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films"
							]
						}
					},
					"response": [
						{
							"name": "Film All with genre",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/films",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:49:57 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Film Updated\",\n        \"description\": \"New film update decription\",\n        \"releaseDate\": \"1989-04-17\",\n        \"duration\": 190,\n        \"genres\": [\n            {\n                \"id\": 2,\n                \"name\": \"Драма\"\n            }\n        ],\n        \"mpa\": {\n            \"id\": 5,\n            \"name\": \"NC-17\"\n        },\n        \"directors\": []\n    },\n    {\n        \"id\": 2,\n        \"name\": \"New film\",\n        \"description\": \"New film about friends\",\n        \"releaseDate\": \"1999-04-30\",\n        \"duration\": 120,\n        \"genres\": [\n            {\n                \"id\": 1,\n                \"name\": \"Комедия\"\n            }\n        ],\n        \"mpa\": {\n            \"id\": 3,\n            \"name\": \"PG-13\"\n        },\n        \"directors\": []\n    }\n]"
						}
					]
				},
				{
					"name": "Film id=1 update remove  genre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has film update response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test film 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
									"});\r",
									"pm.test(\"Test film 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'releaseDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('releaseDate');\r",
									"    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
									"});\r",
									"pm.test(\"Test film 'duration' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('duration');\r",
									"    pm.expect(jsonData.duration, '\"duration\" field must be 190').to.eql(190);    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'mpa.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('mpa');\r",
									"    pm.expect(jsonData.mpa).to.have.property('id');\r",
									"    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'genres' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('genres');\r",
									"    pm.expect(jsonData.genres.length, '\"genres\" field must be have 0 genre').to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 1,\n  \"name\": \"Film Updated\",\n  \"releaseDate\": \"1989-04-17\",\n  \"description\": \"New film update decription\",\n  \"duration\": 190,\n  \"rate\": 4,\n  \"mpa\": { \"id\": 5},\n  \"genres\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/films",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films"
							]
						}
					},
					"response": [
						{
							"name": "Film id=1 update remove  genre",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 1,\n  \"name\": \"Film Updated\",\n  \"releaseDate\": \"1989-04-17\",\n  \"description\": \"New film update decription\",\n  \"duration\": 190,\n  \"rate\": 4,\n  \"mpa\": { \"id\": 5},\n  \"genres\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/films",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:50:06 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Film Updated\",\n    \"description\": \"New film update decription\",\n    \"releaseDate\": \"1989-04-17\",\n    \"duration\": 190,\n    \"genres\": [],\n    \"mpa\": {\n        \"id\": 5,\n        \"name\": null\n    },\n    \"directors\": []\n}"
						}
					]
				},
				{
					"name": "Film id=1 get without genre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Get film response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test film 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test film 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
									"});\r",
									"pm.test(\"Test film 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
									"});\r",
									"pm.test(\"Test film 'releaseDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('releaseDate');\r",
									"    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
									"});\r",
									"pm.test(\"Test film 'duration' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('duration');\r",
									"    pm.expect(jsonData.duration, '\"duration\" field must be 190').to.eql(190);    \r",
									"});\r",
									"pm.test(\"Test film 'mpa' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('mpa');\r",
									"    pm.expect(jsonData.mpa).to.have.property('id');\r",
									"    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
									"    pm.expect(jsonData.mpa).to.have.property('name');\r",
									"    pm.expect(jsonData.mpa.name, '\"mpa.name\" field must be \"PG\"').to.eql(\"NC-17\");    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'genres' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('genres');\r",
									"    if (jsonData.genres != null) {\r",
									"        pm.expect(jsonData.genres.length, '\"genres\" field must be have 0 genre').to.eql(0);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/films/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Film id=1 get without genre",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/films/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:50:17 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Film Updated\",\n    \"description\": \"New film update decription\",\n    \"releaseDate\": \"1989-04-17\",\n    \"duration\": 190,\n    \"genres\": [],\n    \"mpa\": {\n        \"id\": 5,\n        \"name\": \"NC-17\"\n    },\n    \"directors\": []\n}"
						}
					]
				},
				{
					"name": "Film id=2 genres update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has film create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test film 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test film 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"New film\"').to.eql('New film');\r",
									"});\r",
									"pm.test(\"Test film 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description, '\"description\" must be \"New film about friends\"').to.eql('New film about friends');\r",
									"});\r",
									"pm.test(\"Test film 'releaseDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('releaseDate');\r",
									"    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
									"});\r",
									"pm.test(\"Test film 'duration' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('duration');\r",
									"    pm.expect(jsonData.duration, '\"duration\" field must be 100').to.eql(120);    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'mpa.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('mpa');\r",
									"    pm.expect(jsonData.mpa).to.have.property('id');\r",
									"    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 3').to.eql(3);    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'genres' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('genres');\r",
									"    pm.expect(jsonData.genres.length, '\"genres\" field must be have 3 genres').to.eql(3);\r",
									"    pm.expect(jsonData.genres[0]).to.have.property('id');\r",
									"    pm.expect(jsonData.genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);\r",
									"    pm.expect(jsonData.genres[1]).to.have.property('id');\r",
									"    pm.expect(jsonData.genres[1].id, '\"genres[1].id\" field must be 2').to.eql(2);\r",
									"    pm.expect(jsonData.genres[2]).to.have.property('id');\r",
									"    pm.expect(jsonData.genres[2].id, '\"genres[2].id\" field must be 3').to.eql(3);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 2,\n  \"name\": \"New film\",\n  \"releaseDate\": \"1999-04-30\",\n  \"description\": \"New film about friends\",\n  \"duration\": 120,\n  \"mpa\": { \"id\": 3},\n  \"genres\": [{ \"id\": 1}, { \"id\": 2}, { \"id\": 3}]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/films",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films"
							]
						}
					},
					"response": [
						{
							"name": "Film id=2 genres update",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 2,\n  \"name\": \"New film\",\n  \"releaseDate\": \"1999-04-30\",\n  \"description\": \"New film about friends\",\n  \"duration\": 120,\n  \"mpa\": { \"id\": 3},\n  \"genres\": [{ \"id\": 1}, { \"id\": 2}, { \"id\": 3}]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/films",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:50:27 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"New film\",\n    \"description\": \"New film about friends\",\n    \"releaseDate\": \"1999-04-30\",\n    \"duration\": 120,\n    \"genres\": [\n        {\n            \"id\": 1,\n            \"name\": \"Комедия\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Драма\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Мультфильм\"\n        }\n    ],\n    \"mpa\": {\n        \"id\": 3,\n        \"name\": null\n    },\n    \"directors\": []\n}"
						}
					]
				},
				{
					"name": "Film id=2  get with genres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Get film response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test film 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test film 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"New film\"').to.eql('New film');\r",
									"});\r",
									"pm.test(\"Test film 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description, '\"description\" must be \"New film about friends\"').to.eql('New film about friends');\r",
									"});\r",
									"pm.test(\"Test film 'releaseDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('releaseDate');\r",
									"    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
									"});\r",
									"pm.test(\"Test film 'duration' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('duration');\r",
									"    pm.expect(jsonData.duration, '\"duration\" field must be 100').to.eql(120);    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'mpa.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('mpa');\r",
									"    pm.expect(jsonData.mpa).to.have.property('id');\r",
									"    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 3').to.eql(3);\r",
									"    pm.expect(jsonData.mpa).to.have.property('name');\r",
									"    pm.expect(jsonData.mpa.name, '\"mpa.name\" field must be \"PG-13\"').to.eql(\"PG-13\");\r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'genres' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('genres');\r",
									"    pm.expect(jsonData.genres.length, '\"genres\" field must be have 3 genres').to.eql(3);\r",
									"    pm.expect(jsonData.genres[0]).to.have.property('id');\r",
									"    pm.expect(jsonData.genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);    \r",
									"    pm.expect(jsonData.genres[0]).to.have.property('name');\r",
									"    pm.expect(jsonData.genres[0].name, '\"genres[0].name\" field must be \"Комедия\"').to.eql('Комедия');\r",
									"    pm.expect(jsonData.genres[1]).to.have.property('id');\r",
									"    pm.expect(jsonData.genres[1].id, '\"genres[1].id\" field must be 2').to.eql(2);\r",
									"    pm.expect(jsonData.genres[1]).to.have.property('name');\r",
									"    pm.expect(jsonData.genres[1].name, '\"genres[1].name\" field must be \"Драма\"').to.eql('Драма');\r",
									"    pm.expect(jsonData.genres[2]).to.have.property('id');\r",
									"    pm.expect(jsonData.genres[2].id, '\"genres[2].id\" field must be 3').to.eql(3);\r",
									"    pm.expect(jsonData.genres[2]).to.have.property('name');\r",
									"    pm.expect(jsonData.genres[2].name, '\"genres[2].name\" field must be \"Мультфильм\"').to.eql('Мультфильм');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/films/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Film id=2  get with genres",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/films/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "2",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:50:39 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"New film\",\n    \"description\": \"New film about friends\",\n    \"releaseDate\": \"1999-04-30\",\n    \"duration\": 120,\n    \"genres\": [\n        {\n            \"id\": 1,\n            \"name\": \"Комедия\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Драма\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Мультфильм\"\n        }\n    ],\n    \"mpa\": {\n        \"id\": 3,\n        \"name\": \"PG-13\"\n    },\n    \"directors\": []\n}"
						}
					]
				},
				{
					"name": "Film id=2  genres update with duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has film create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test film 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test film 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"New film\"').to.eql('New film');\r",
									"});\r",
									"pm.test(\"Test film 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description, '\"description\" must be \"New film about friends\"').to.eql('New film about friends');\r",
									"});\r",
									"pm.test(\"Test film 'releaseDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('releaseDate');\r",
									"    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
									"});\r",
									"pm.test(\"Test film 'duration' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('duration');\r",
									"    pm.expect(jsonData.duration, '\"duration\" field must be 100').to.eql(120);    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'mpa.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('mpa');\r",
									"    pm.expect(jsonData.mpa).to.have.property('id');\r",
									"    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 3').to.eql(3);    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'genres' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('genres');\r",
									"    pm.expect(jsonData.genres.length, '\"genres\" field must be have 2 genres').to.eql(2);\r",
									"    pm.expect(jsonData.genres[0]).to.have.property('id');\r",
									"    pm.expect(jsonData.genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);\r",
									"    pm.expect(jsonData.genres[1]).to.have.property('id');\r",
									"    pm.expect(jsonData.genres[1].id, '\"genres[1].id\" field must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 2,\n  \"name\": \"New film\",\n  \"releaseDate\": \"1999-04-30\",\n  \"description\": \"New film about friends\",\n  \"duration\": 120,\n  \"mpa\": { \"id\": 3},\n  \"genres\": [{ \"id\": 1}, { \"id\": 2}, { \"id\": 1}]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/films",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films"
							]
						}
					},
					"response": [
						{
							"name": "Film id=2  genres update with duplicate",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 2,\n  \"name\": \"New film\",\n  \"releaseDate\": \"1999-04-30\",\n  \"description\": \"New film about friends\",\n  \"duration\": 120,\n  \"mpa\": { \"id\": 3},\n  \"genres\": [{ \"id\": 1}, { \"id\": 2}, { \"id\": 1}]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/films",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:50:50 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"New film\",\n    \"description\": \"New film about friends\",\n    \"releaseDate\": \"1999-04-30\",\n    \"duration\": 120,\n    \"genres\": [\n        {\n            \"id\": 1,\n            \"name\": \"Комедия\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Драма\"\n        }\n    ],\n    \"mpa\": {\n        \"id\": 3,\n        \"name\": null\n    },\n    \"directors\": []\n}"
						}
					]
				},
				{
					"name": "Film id=2  get with genre  without duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Get film response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test film 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test film 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"New film\"').to.eql('New film');\r",
									"});\r",
									"pm.test(\"Test film 'description' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description, '\"description\" must be \"New film about friends\"').to.eql('New film about friends');\r",
									"});\r",
									"pm.test(\"Test film 'releaseDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('releaseDate');\r",
									"    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
									"});\r",
									"pm.test(\"Test film 'duration' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('duration');\r",
									"    pm.expect(jsonData.duration, '\"duration\" field must be 100').to.eql(120);    \r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'mpa.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('mpa');\r",
									"    pm.expect(jsonData.mpa).to.have.property('id');\r",
									"    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 3').to.eql(3);\r",
									"    pm.expect(jsonData.mpa).to.have.property('name');\r",
									"    pm.expect(jsonData.mpa.name, '\"mpa.name\" field must be \"PG-13\"').to.eql(\"PG-13\");\r",
									"});\r",
									"\r",
									"pm.test(\"Test film 'genres' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('genres');\r",
									"    pm.expect(jsonData.genres.length, '\"genres\" field must be have 2 genres').to.eql(2);\r",
									"    pm.expect(jsonData.genres[0]).to.have.property('id');\r",
									"    pm.expect(jsonData.genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);    \r",
									"    pm.expect(jsonData.genres[0]).to.have.property('name');\r",
									"    pm.expect(jsonData.genres[0].name, '\"genres[0].name\" field must be \"Комедия\"').to.eql('Комедия');\r",
									"    pm.expect(jsonData.genres[1]).to.have.property('id');\r",
									"    pm.expect(jsonData.genres[1].id, '\"genres[1].id\" field must be 2').to.eql(2);\r",
									"    pm.expect(jsonData.genres[1]).to.have.property('name');\r",
									"    pm.expect(jsonData.genres[1].name, '\"genres[1].name\" field must be \"Драма\"').to.eql('Драма');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/films/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Film id=2  get with genre  without duplicate",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/films/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"films",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "2",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 05 Jul 2023 09:51:02 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"name\": \"New film\",\n    \"description\": \"New film about friends\",\n    \"releaseDate\": \"1999-04-30\",\n    \"duration\": 120,\n    \"genres\": [\n        {\n            \"id\": 1,\n            \"name\": \"Комедия\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Драма\"\n        }\n    ],\n    \"mpa\": {\n        \"id\": 3,\n        \"name\": \"PG-13\"\n    },\n    \"directors\": []\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}